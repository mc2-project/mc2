# User configuration
user:
    # Your username - username should be specified in certificate
    username: user1

    # Path to your symmetric key - will be used for encryption/decryption
    # If you don't have a symmetric key, specify a path here and the MC2 Client
    # will generate a key and output it to this path
    symmetric_key: /root/mc2/demo/keys/user1_sym.key

    # Path to your private key and certificate
    # If you don't have a private key / certificate, specify paths here
    # and the MC2 client will generate them to these paths
    private_key: /root/mc2/demo/keys/user1.pem
    certificate: /root/mc2/demo/keys/user1.crt

# Configuration for cloud resource management and connection
cloud:
    # Username to be used when scp-ing into remote machines
    remote_username: root

    # Cloud orchestrator
    orchestrator: 127.0.0.1:50052

    # Workers in cluster
    nodes:
      - 127.0.0.1 

    # List of commands to launch desired compute service
    launch:
      # Launch commands for Secure XGBoost service
      secure_xgboost:
        - python3 /root/secure-xgboost/demo/python/remote-control/server/enclave_serve.py
        - python3 /root/secure-xgboost/demo/python/remote-control/orchestrator/start_orchestrator.py

      # Launch command for Opaque SQL service
      opaque_sql:
        - build/sbt run

    # Directory to upload encrypted data to
    data_dir: /root/data

    # Directory to save encrypted results to
    # This directory will be fetched from when retrieving results
    results: 
      # Secure XGBoost results
      - /root/results/xgb.model

      # FIXME: Opaque SQL results
      # - /root/results/opaque_sql_result

# Configuration for local data
local:
    # If you want to run Secure XGBoost
    # Your data to compute on
    data:
      - /root/mc2/demo/data/securexgb_train.csv
      - /root/mc2/demo/data/securexgb_test.csv

    # Secure XGBoost script to run
    script: /root/mc2/demo/secure_xgboost_demo.py
    # ----------------------------------

    # # FIXME: If you want to run Opaque SQL
    # # Your data to compute on
    # data:
    #   - /root/mc2/demo/data/opaquesql.csv
    # 
    # schemas:
    #   - /root/mc2/demo/data/opaquesql_schema.json
    # 
    # # Opaque SQL script to run
    # script: /root/mc2/demo/opaque_sql_demo.scala
    # ------------------------------

    # Directory to download results
    results: /root/mc2/demo/results

# Configuration for remote attestation of enclaves
attestation:
    simulation_mode: 1
