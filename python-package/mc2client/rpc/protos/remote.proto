// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "ndarray.proto";

package remote;

// Interface exported by the server.
service Remote {
  // Send params of a DMatrix to the server for initialization
  // Returns the name assigned to this DMatrix
  rpc rpc_XGDMatrixCreateFromEncryptedFile(DMatrixAttrsRequest) returns (Name) {}
  
  // Send params of a Booster to the server for initialization 
  // Returns the name assigned to this booster
  rpc rpc_XGBoosterCreate(BoosterAttrsRequest) returns (Name) {}
  
  // Set booster parameters
  rpc rpc_XGBoosterSetParam(BoosterParamRequest) returns (StatusMsg) {}
  
  // Update the booster for one round
  rpc rpc_XGBoosterUpdateOneIter(BoosterUpdateParamsRequest) returns (StatusMsg) {}
  
  // Run predictions
  rpc rpc_XGBoosterPredict(PredictParamsRequest) returns (Predictions) {}
  
  // Save model to a file on the server
  rpc rpc_XGBoosterSaveModel(SaveModelParamsRequest) returns (StatusMsg) {}
  
  // Load model from file on the server
  rpc rpc_XGBoosterLoadModel(LoadModelParamsRequest) returns (StatusMsg) {}
  
  // Dump model 
  rpc rpc_XGBoosterDumpModelEx(DumpModelParamsRequest) returns (Dump) {}
  
  // Dump model with features
  rpc rpc_XGBoosterDumpModelExWithFeatures(DumpModelWithFeaturesParamsRequest) returns (Dump) {}
  
  // Save model to buffer
  rpc rpc_XGBoosterGetModelRaw(ModelRawParamsRequest) returns (Dump) {}
  // 
  // Get number of columns in the DMatrix
  rpc rpc_XGDMatrixNumCol(NumColRequest) returns (Integer) {}
  
  // Get number of rows in the DMatrix
  rpc rpc_XGDMatrixNumRow(NumRowRequest) returns (Integer) {}
  
  // Initialize Rabit
  rpc rpc_RabitInit(RabitParams) returns (StatusMsg) {}
  
  // Finalize Rabit
  rpc rpc_RabitFinalize(RabitParams) returns (StatusMsg) {}
}

// Current status of the node
message StatusMsg {
  // Status
  Status status = 1;
  numproto.protobuf.NDArray signature = 2;
  uint32 sig_len = 3;
}

// Current status of the node
message Status {
  // Status
  int32 status = 1;

  // Exception message
  string exception = 2;
}

message SequenceNumber {
  // k byte random number generated at the start of the session
  numproto.protobuf.NDArray nonce = 1;
  
  // Size of nonce (k = 12, or CIPHER_IV_SIZE)
  uint32 nonce_size = 2;

  // 4 byte counter that increments with each synchronized function call
  uint32 nonce_ctr = 3;
}

// Params for the constructor of a DMatrix
message DMatrixAttrs {
    repeated string filenames = 1;
    repeated string usernames = 2;
    uint32 silent = 3;
}

// Wrapper around DMatrixAttrs to include sequence number
message DMatrixAttrsRequest {
    DMatrixAttrs params = 1;
    SequenceNumber seq_num = 2;
    string username = 3;
    numproto.protobuf.NDArray signature = 4;
    uint32 sig_len = 5;

    // Orchestrator will collect and deliver the below to each enclave in the cluster
    repeated string signers = 6;
    repeated numproto.protobuf.NDArray signatures = 7;
    repeated uint32 sig_lengths = 8;
}

// Params for the constructor of a Booster
message BoosterAttrs {
    repeated string cache = 1;
    uint64 length = 2;
}

// Wrapper around BoosterAttrs to include sequence number
message BoosterAttrsRequest {
    BoosterAttrs params = 1;
    SequenceNumber seq_num = 2;
    string username = 3;
    numproto.protobuf.NDArray signature = 4;
    uint32 sig_len = 5;

    // Orchestrator will collect and deliver the below to each enclave in the cluster
    repeated string signers = 6;
    repeated numproto.protobuf.NDArray signatures = 7;
    repeated uint32 sig_lengths = 8;
}

// Booster parameter
message BoosterParam {
    string booster_handle = 1;
    string key = 2;
    string value = 3;
}

// Wrapper around BoosterParam to include sequence number
message BoosterParamRequest {
    BoosterParam params = 1;
    SequenceNumber seq_num = 2;
    string username = 3;
    numproto.protobuf.NDArray signature = 4;
    uint32 sig_len = 5;    

    // Orchestrator will collect and deliver the below to each enclave in the cluster
    repeated string signers = 6;
    repeated numproto.protobuf.NDArray signatures = 7;
    repeated uint32 sig_lengths = 8;
}

// Params for training
message BoosterUpdateParams {
    string booster_handle = 1;
    string dtrain_handle = 2;
    uint32 iteration = 3;
}

message BoosterUpdateParamsRequest {
    BoosterUpdateParams params = 1;
    SequenceNumber seq_num = 2;
    string username = 3;
    numproto.protobuf.NDArray signature = 4;
    uint32 sig_len = 5;

    // Orchestrator will collect and deliver the below to each enclave in the cluster
    repeated string signers = 6;
    repeated numproto.protobuf.NDArray signatures = 7;
    repeated uint32 sig_lengths = 8;
}
// 
// // Params for eval
// message BoosterEvalSetParams {
//     string handle = 1;
//     repeated Pair evals = 2;
//     uint32 iteration = 3;
//     numproto.protobuf.NDArray signature = 4;
//     uint32 sig_len = 5;
// }
// 
// Params for prediction
message PredictParams {
    string booster_handle = 1;
    string dmatrix_handle = 2;
    uint32 option_mask  = 3;
    uint32 ntree_limit = 4;
    uint32 training = 5;
}

// Wrapper around PredictParams to include sequence number
message PredictParamsRequest {
    PredictParams params = 1;
    SequenceNumber seq_num = 2;
    string username = 3;
    numproto.protobuf.NDArray signature = 4;
    uint32 sig_len = 5;

    // Orchestrator will collect and deliver the below to each enclave in the cluster
    repeated string signers = 6;
    repeated numproto.protobuf.NDArray signatures = 7;
    repeated uint32 sig_lengths = 8;
}

// Params for save model
message SaveModelParams {
    string booster_handle = 1;
    string filename = 2;
}

// Wrapper around SaveModelParams to include sequence number
message SaveModelParamsRequest {
    SaveModelParams params = 1;
    SequenceNumber seq_num = 2;
    string username = 3;
    numproto.protobuf.NDArray signature = 4;
    uint32 sig_len = 5;

    // Orchestrator will collect and deliver the below to each enclave in the cluster
    repeated string signers = 6;
    repeated numproto.protobuf.NDArray signatures = 7;
    repeated uint32 sig_lengths = 8;
}

// Params for load model
message LoadModelParams {
    string booster_handle = 1;
    string filename = 2;
}

// Wrapper around LoadModelParams to include sequence number
message LoadModelParamsRequest {
    LoadModelParams params = 1;
    SequenceNumber seq_num = 2;
    string username = 3;
    numproto.protobuf.NDArray signature = 4;
    uint32 sig_len = 5;

    // Orchestrator will collect and deliver the below to each enclave in the cluster
    repeated string signers = 6;
    repeated numproto.protobuf.NDArray signatures = 7;
    repeated uint32 sig_lengths = 8;
}

// Params for dump model
message DumpModelParams {
    string booster_handle = 1;
    string fmap = 2;
    uint32 with_stats = 3;
    string dump_format = 4;
}

// Wrapper around DumpModelParams to include sequence number
message DumpModelParamsRequest {
    DumpModelParams params = 1;
    SequenceNumber seq_num = 2;
    string username = 3;
    numproto.protobuf.NDArray signature = 4;
    uint32 sig_len = 5;

    // Orchestrator will collect and deliver the below to each enclave in the cluster
    repeated string signers = 6;
    repeated numproto.protobuf.NDArray signatures = 7;
    repeated uint32 sig_lengths = 8;
}

// Params for dump model with features
message DumpModelWithFeaturesParams {
    string booster_handle = 1;
    uint32 flen = 2;
    repeated string fname = 3;
    repeated string ftype = 4;
    uint32 with_stats = 5;
    string dump_format = 6;
}

message DumpModelWithFeaturesParamsRequest {
    DumpModelWithFeaturesParams params = 1;
    SequenceNumber seq_num = 2;
    string username = 3;
    numproto.protobuf.NDArray signature = 4;
    uint32 sig_len = 5;

    // Orchestrator will collect and deliver the below to each enclave in the cluster
    repeated string signers = 6;
    repeated numproto.protobuf.NDArray signatures = 7;
    repeated uint32 sig_lengths = 8;
}

// Params for dump model
message ModelRawParams {
    string booster_handle = 1;
}

message ModelRawParamsRequest {
    ModelRawParams params = 1;
    SequenceNumber seq_num = 2;
    string username = 3;
    numproto.protobuf.NDArray signature = 4;
    uint32 sig_len = 5;

    // Orchestrator will collect and deliver the below to each enclave in the cluster
    repeated string signers = 6;
    repeated numproto.protobuf.NDArray signatures = 7;
    repeated uint32 sig_lengths = 8;
}

// Model dump
message Dump {
    repeated string sarr = 1;
    uint64 length = 2;
    Status status = 3;
    numproto.protobuf.NDArray signature = 4;
    uint32 sig_len = 5;
}
// 
// // Pair of strings
// message Pair {
//     string x = 1;
//     string y = 2;
// }
// 
message NameRequestParams {
  // Name that the server assigned the handle
  string name = 1;
}

message Name {
  // Name that the server assigned the handle
  string name = 1;
  string username = 2;
  // Status of call (for returned Name)
  numproto.protobuf.NDArray signature = 3;
  uint32 sig_len = 4;
  Status status = 5;
}

message NumColRequest {
    NameRequestParams params = 1;
    SequenceNumber seq_num = 2;
    string username = 3;
    numproto.protobuf.NDArray signature = 4;
    uint32 sig_len = 5;

    // Orchestrator will collect and deliver the below to each enclave in the cluster
    repeated string signers = 6;
    repeated numproto.protobuf.NDArray signatures = 7;
    repeated uint32 sig_lengths = 8;
}

message NumRowRequest {
    NameRequestParams params = 1;
    SequenceNumber seq_num = 2;
    string username = 3;
    numproto.protobuf.NDArray signature = 4;
    uint32 sig_len = 5;

    // Orchestrator will collect and deliver the below to each enclave in the cluster
    repeated string signers = 6;
    repeated numproto.protobuf.NDArray signatures = 7;
    repeated uint32 sig_lengths = 8;
}

// Integer
message Integer {
    uint32 value = 1;
    // Status of call (for returned Integer)
    Status status = 2;
    numproto.protobuf.NDArray signature = 3;
    uint32 sig_len = 4;
}

// Encrypted predictions served by enclave, to be decrypted at client
message Predictions {
    // Encrypted predictions
    repeated numproto.protobuf.NDArray predictions = 1;

    // Length of predictions
    repeated uint32 num_preds = 2;

    // Status
    Status status = 3;

    repeated numproto.protobuf.NDArray signatures = 4;
    repeated uint32 sig_lens = 5;
}
// 
// // Params for distributed training
// message ClusterParams {
//     // Number of nodes in cluster
//     uint32 num_workers = 1;  
// }
// 
message RabitParams {
    Status params = 1; // Dummy parameter for compatibility
    string username = 2;
    SequenceNumber seq_num = 3;
    numproto.protobuf.NDArray signature = 4;
    uint32 sig_len = 5;

    repeated string signers = 6;
    repeated numproto.protobuf.NDArray signatures = 7;
    repeated uint32 sig_lengths = 8;
}
